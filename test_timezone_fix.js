const db = require('./backend/database_pg');

async function testTimezoneFix() {
    try {
        console.log('üïê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã...\n');
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const timezoneInfo = await db.query('SHOW timezone');
        console.log(`–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ –ë–î: ${timezoneInfo.rows[0].TimeZone || timezoneInfo.rows[0].timezone}`);
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ë–î
        const currentTime = await db.query('SELECT NOW() as current_time');
        console.log(`–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ë–î: ${currentTime.rows[0].current_time}`);
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ API
        const testApiDateTime = "2025-05-01 09:04:42";
        console.log(`\n–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∏–∑ API: ${testApiDateTime}`);
        
        // –¢–∞–∫ –∫–∞–∫ –≤—Ä–µ–º—è –≤ API —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É –ê—Å—Ç–∞–Ω—ã (GMT+5)
        const localDateTime = new Date(testApiDateTime + '+05:00');
        console.log(`–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ë–î: ${localDateTime.toISOString()}`);
        console.log(`–í—Ä–µ–º—è –≤ –º–µ—Å—Ç–Ω–æ–π –∑–æ–Ω–µ –ë–î: ${localDateTime}`);
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º –∫–∞–∫ —ç—Ç–æ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –ê–ª–º–∞—Ç—ã
        const almaty = new Date(localDateTime);
        console.log(`–í—Ä–µ–º—è –≤ –ê–ª–º–∞—Ç—ã (GMT+5): ${almaty.toLocaleString('ru-RU', { timeZone: 'Asia/Almaty' })}`);
        
        // –°–æ–∑–¥–∞–¥–∏–º —Ç–µ—Å—Ç–æ–≤—É—é –≤—Å—Ç–∞–≤–∫—É
        console.log('\n–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å—Ç–∞–≤–∫—É –≤ –ë–î...');
        
        await db.query(`
            INSERT INTO time_events (employee_number, object_code, event_datetime, event_type)
            VALUES ($1, $2, $3, $4)
        `, ['TEST-TIMEZONE', '5045', localDateTime.toISOString(), '1']);
        
        // –ß–∏—Ç–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        const result = await db.query(`
            SELECT event_datetime FROM time_events 
            WHERE employee_number = 'TEST-TIMEZONE'
        `);
        
        if (result.rows.length > 0) {
            const dbTime = result.rows[0].event_datetime;
            console.log(`–í—Ä–µ–º—è –≤ –ë–î: ${dbTime}`);
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –ê–ª–º–∞—Ç—ã
            const backToAlmaty = new Date(dbTime).toLocaleString('ru-RU', { timeZone: 'Asia/Almaty' });
            console.log(`–í—Ä–µ–º—è –≤ –ê–ª–º–∞—Ç—ã –ø–æ—Å–ª–µ —á—Ç–µ–Ω–∏—è: ${backToAlmaty}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
            const originalParts = testApiDateTime.split(' ');
            const [date, time] = originalParts;
            const almtyFormatted = backToAlmaty.replace(/(\d{2})\.(\d{2})\.(\d{4}), (\d{2}):(\d{2}):(\d{2})/, '$3-$2-$1 $4:$5:$6');
            
            console.log(`–ò—Å—Ö–æ–¥–Ω–æ–µ API –≤—Ä–µ–º—è: ${testApiDateTime}`);
            console.log(`–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: ${almtyFormatted}`);
            console.log(`–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: ${testApiDateTime === almtyFormatted ? '‚úÖ' : '‚ùå'}`);
        }
        
        // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
        await db.query(`DELETE FROM time_events WHERE employee_number = 'TEST-TIMEZONE'`);
        
        console.log('\n‚úÖ –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã –∑–∞–≤–µ—Ä—à–µ–Ω');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    } finally {
        process.exit(0);
    }
}

testTimezoneFix();