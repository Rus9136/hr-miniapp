const axios = require('axios');

async function testFixedPayrollLogic() {
    try {
        console.log('=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –§–û–¢ ===\n');
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞ –∏—é–ª—å 2025 (—Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü)
        const params = {
            dateFrom: '2025-07-01',
            dateTo: '2025-07-31'
        };
        
        console.log(`–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥: ${params.dateFrom} - ${params.dateTo}`);
        
        const response = await axios.get('http://localhost:3030/api/admin/reports/payroll', { params });
        
        if (response.data.success) {
            console.log(`\n‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!`);
            console.log(`–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${response.data.data.length}`);
            console.log(`–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: ${response.data.summary.total} —Ç–µ–Ω–≥–µ`);
            
            if (response.data.data.length > 0) {
                // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π
                console.log('\nüìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö:');
                
                // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                const employeeStats = {};
                
                response.data.data.forEach(record => {
                    const key = record.table_number;
                    if (!employeeStats[key]) {
                        employeeStats[key] = {
                            name: record.full_name,
                            shifts: [],
                            monthly_payroll: record.payroll,
                            shifts_count: record.shifts_count,
                            total_daily_payroll: 0
                        };
                    }
                    employeeStats[key].shifts.push({
                        date: record.work_date,
                        daily_payroll: record.daily_payroll,
                        work_hours: record.work_hours,
                        schedule: record.schedule_name
                    });
                    employeeStats[key].total_daily_payroll += record.daily_payroll;
                });
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
                const employees = Object.values(employeeStats).slice(0, 3);
                
                employees.forEach((emp, index) => {
                    console.log(`\n${index + 1}. ${emp.name}:`);
                    console.log(`   –ú–µ—Å—è—á–Ω–∞—è –ó–ü: ${emp.monthly_payroll.toLocaleString('ru-RU')} —Ç–µ–Ω–≥–µ`);
                    console.log(`   –°–º–µ–Ω –≤ –ø–µ—Ä–∏–æ–¥–µ: ${emp.shifts_count}`);
                    console.log(`   –§–û–¢ –Ω–∞ —Å–º–µ–Ω—É: ${(emp.monthly_payroll / emp.shifts_count).toFixed(2)} —Ç–µ–Ω–≥–µ`);
                    console.log(`   –û–±—â–∏–π –§–û–¢ –∑–∞ –ø–µ—Ä–∏–æ–¥: ${emp.total_daily_payroll.toFixed(2)} —Ç–µ–Ω–≥–µ`);
                    console.log(`   –ü—Ä–∏–º–µ—Ä—ã —Å–º–µ–Ω:`);
                    emp.shifts.slice(0, 2).forEach(shift => {
                        console.log(`     ${shift.date}: ${shift.daily_payroll} —Ç–µ–Ω–≥–µ (${shift.work_hours}—á, ${shift.schedule})`);
                    });
                });
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–æ–≤
                console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—á–µ—Ç–æ–≤:');
                
                const firstEmployee = employees[0];
                const expectedDailyPayroll = firstEmployee.monthly_payroll / firstEmployee.shifts_count;
                const actualDailyPayroll = firstEmployee.shifts[0].daily_payroll;
                
                console.log(`–û–∂–∏–¥–∞–µ–º—ã–π –§–û–¢ –Ω–∞ –¥–µ–Ω—å: ${expectedDailyPayroll.toFixed(2)}`);
                console.log(`–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –§–û–¢ –Ω–∞ –¥–µ–Ω—å: ${actualDailyPayroll.toFixed(2)}`);
                console.log(`–†–∞—Å—á–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: ${Math.abs(expectedDailyPayroll - actualDailyPayroll) < 0.01 ? '‚úÖ' : '‚ùå'}`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É
                const calculatedTotal = response.data.data.reduce((sum, row) => sum + row.daily_payroll, 0);
                const reportedTotal = parseFloat(response.data.summary.total);
                
                console.log(`\n–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞:`);
                console.log(`–†–∞—Å—á–µ—Ç–Ω–∞—è: ${calculatedTotal.toFixed(2)} —Ç–µ–Ω–≥–µ`);
                console.log(`–í –æ—Ç—á–µ—Ç–µ: ${reportedTotal.toFixed(2)} —Ç–µ–Ω–≥–µ`);
                console.log(`–°—É–º–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞: ${Math.abs(calculatedTotal - reportedTotal) < 0.01 ? '‚úÖ' : '‚ùå'}`);
                
            } else {
                console.log('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
            }
            
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç—á–µ—Ç–µ:', response.data.error);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.response?.data || error.message);
    }
}

testFixedPayrollLogic();