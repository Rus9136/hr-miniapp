const { pool, queryRows, queryRow } = require('./backend/database_pg');

async function analyzeNightShifts() {
  try {
    console.log('=== –ê–ù–ê–õ–ò–ó –ù–û–ß–ù–´–• –°–ú–ï–ù –í HR –°–ò–°–¢–ï–ú–ï ===\n');

    // 1. –ê–ù–ê–õ–ò–ó –°–û–¢–†–£–î–ù–ò–ö–ê –ê–ü00-00467
    console.log('1. –ê–ù–ê–õ–ò–ó –°–û–¢–†–£–î–ù–ò–ö–ê –ê–ü00-00467');
    console.log('=' .repeat(50));
    
    // –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    const employee = await queryRow(`
      SELECT id, table_number, full_name, object_code, staff_position_code 
      FROM employees 
      WHERE table_number = '–ê–ü00-00467'
    `);
    
    if (employee) {
      console.log('–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω:');
      console.log(`- ID: ${employee.id}`);
      console.log(`- –¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: ${employee.table_number}`);
      console.log(`- –§–ò–û: ${employee.full_name}`);
      console.log(`- –ö–æ–¥ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è: ${employee.object_code || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
      console.log(`- –ö–æ–¥ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏: ${employee.staff_position_code || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n`);
      
      // –ü–æ–∏—Å–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
      const scheduleAssignment = await queryRow(`
        SELECT esa.*, ws.schedule_name, ws.work_hours
        FROM employee_schedule_assignments esa
        LEFT JOIN work_schedules_1c ws ON esa.schedule_code = ws.schedule_code
        WHERE esa.employee_number = '–ê–ü00-00467'
          AND (esa.end_date IS NULL OR esa.end_date >= CURRENT_DATE)
        ORDER BY esa.created_at DESC
        LIMIT 1
      `);
      
      if (scheduleAssignment) {
        console.log('–ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:');
        console.log(`- –ö–æ–¥ –≥—Ä–∞—Ñ–∏–∫–∞: ${scheduleAssignment.schedule_code}`);
        console.log(`- –ù–∞–∑–≤–∞–Ω–∏–µ: ${scheduleAssignment.schedule_name || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`);
        console.log(`- –ß–∞—Å–æ–≤ –≤ —Å–º–µ–Ω–µ: ${scheduleAssignment.work_hours || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`);
        console.log(`- –î–∞—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: ${scheduleAssignment.start_date}`);
        console.log(`- –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${scheduleAssignment.end_date || '–∞–∫—Ç–∏–≤–µ–Ω'}\n`);
      } else {
        console.log('–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω\n');
      }
      
      // –°–æ–±—ã—Ç–∏—è –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
      const timeEvents = await queryRows(`
        SELECT event_datetime, event_type, object_code
        FROM time_events 
        WHERE employee_number = '–ê–ü00-00467'
          AND event_datetime >= CURRENT_DATE - INTERVAL '30 days'
        ORDER BY event_datetime DESC
        LIMIT 20
      `);
      
      console.log(`–°–æ–±—ã—Ç–∏—è –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π (${timeEvents.length} –∑–∞–ø–∏—Å–µ–π):`);
      if (timeEvents.length === 0) {
        console.log('   ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–æ–±—ã—Ç–∏—è–º –≤—Ä–µ–º–µ–Ω–∏');
      } else {
        timeEvents.forEach(event => {
          console.log(`- ${event.event_datetime}: ${event.event_type} (–æ–±—ä–µ–∫—Ç: ${event.object_code || '–Ω–µ —É–∫–∞–∑–∞–Ω'})`);
        });
      }
      console.log();
      
      // –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
      const timeRecords = await queryRows(`
        SELECT date, check_in, check_out, hours_worked, status, off_schedule
        FROM time_records 
        WHERE employee_number = '–ê–ü00-00467'
          AND date >= CURRENT_DATE - INTERVAL '30 days'
        ORDER BY date DESC
        LIMIT 15
      `);
      
      console.log(`–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π (${timeRecords.length} –∑–∞–ø–∏—Å–µ–π):`);
      if (timeRecords.length === 0) {
        console.log('   ‚ùå –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤—Ä–µ–º–µ–Ω–∏');
      } else {
        timeRecords.forEach(record => {
          console.log(`- ${record.date}: ${record.check_in || '–Ω–µ—Ç'} - ${record.check_out || '–Ω–µ—Ç'} | ${record.hours_worked || 0}—á | ${record.status || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'} | ${record.off_schedule ? '–≤–Ω–µ –≥—Ä–∞—Ñ–∏–∫–∞' : '–ø–æ –≥—Ä–∞—Ñ–∏–∫—É'}`);
        });
      }
      console.log();
      
    } else {
      console.log('‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ê–ü00-00467 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n');
    }

    // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏
    console.log('1.1. –ê–ù–ê–õ–ò–ó –°–û–¢–†–£–î–ù–ò–ö–û–í –° –î–ê–ù–ù–´–ú–ò –í–†–ï–ú–ï–ù–ò');
    console.log('-' .repeat(50));
    
    const employeesWithData = await queryRows(`
      SELECT DISTINCT e.table_number, e.full_name
      FROM employees e
      WHERE e.table_number IN (
        SELECT DISTINCT employee_number FROM time_events
        UNION
        SELECT DISTINCT employee_number FROM time_records
      )
      LIMIT 3
    `);
    
    for (const emp of employeesWithData) {
      console.log(`\nüë§ ${emp.table_number} - ${emp.full_name}`);
      
      // –°–æ–±—ã—Ç–∏—è –≤—Ä–µ–º–µ–Ω–∏
      const events = await queryRows(`
        SELECT event_datetime, event_type
        FROM time_events 
        WHERE employee_number = $1
          AND event_datetime >= CURRENT_DATE - INTERVAL '7 days'
        ORDER BY event_datetime DESC
        LIMIT 5
      `, [emp.table_number]);
      
      console.log(`   –°–æ–±—ã—Ç–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é (${events.length}):`);
      events.forEach(event => {
        console.log(`   - ${event.event_datetime}: ${event.event_type}`);
      });
      
      // –ó–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏
      const records = await queryRows(`
        SELECT date, check_in, check_out, hours_worked, status
        FROM time_records 
        WHERE employee_number = $1
          AND date >= CURRENT_DATE - INTERVAL '7 days'
        ORDER BY date DESC
        LIMIT 5
      `, [emp.table_number]);
      
      console.log(`   –ó–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞ –Ω–µ–¥–µ–ª—é (${records.length}):`);
      records.forEach(record => {
        console.log(`   - ${record.date}: ${record.check_in || '–Ω–µ—Ç'} - ${record.check_out || '–Ω–µ—Ç'} (${record.hours_worked || 0}—á) ${record.status || ''}`);
      });
    }

    // 2. –ü–û–ò–°–ö –ù–û–ß–ù–´–• –ì–†–ê–§–ò–ö–û–í
    console.log('\n2. –ü–û–ò–°–ö –ì–†–ê–§–ò–ö–û–í –†–ê–ë–û–¢–´');
    console.log('=' .repeat(50));
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º
    const scheduleAnalysis = await queryRows(`
      SELECT DISTINCT schedule_code, schedule_name, work_hours
      FROM work_schedules_1c 
      ORDER BY work_hours DESC
      LIMIT 15
    `);
    
    console.log(`–ê–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–∞–±–æ—Ç—ã (${scheduleAnalysis.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤):`);
    
    const nightShifts = [];
    const longShifts = [];
    const normalShifts = [];
    
    scheduleAnalysis.forEach((schedule, index) => {
      const name = schedule.schedule_name || '–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
      const hours = schedule.work_hours || 0;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ—á–Ω—ã–µ —Å–º–µ–Ω—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ —á–∞—Å–∞–º
      const isNightShift = name.toLowerCase().includes('–Ω–æ—á—å') || 
                          name.toLowerCase().includes('night') ||
                          name.includes('22:00') || 
                          name.includes('23:00') ||
                          name.includes('00:00') ||
                          name.includes('01:00') ||
                          name.includes('02:00') ||
                          (hours >= 12);
      
      const schedule_info = {
        ...schedule,
        name: name,
        hours: hours,
        index: index + 1
      };
      
      if (isNightShift && hours >= 12) {
        nightShifts.push(schedule_info);
      } else if (hours > 10) {
        longShifts.push(schedule_info);
      } else {
        normalShifts.push(schedule_info);
      }
      
      console.log(`${index + 1}. ${schedule.schedule_code}`);
      console.log(`   ${name} (${hours}—á)`);
      if (isNightShift) {
        console.log(`   üåô –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–ê–Ø –ù–û–ß–ù–ê–Ø –°–ú–ï–ù–ê`);
      } else if (hours > 10) {
        console.log(`   ‚è∞ –î–õ–ò–ù–ù–ê–Ø –°–ú–ï–ù–ê`);
      }
    });
    
    console.log(`\n–°–≤–æ–¥–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤:`);
    console.log(`- –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –Ω–æ—á–Ω—ã—Ö: ${nightShifts.length}`);
    console.log(`- –î–ª–∏–Ω–Ω—ã—Ö —Å–º–µ–Ω: ${longShifts.length}`);
    console.log(`- –û–±—ã—á–Ω—ã—Ö —Å–º–µ–Ω: ${normalShifts.length}`);
    console.log();

    // 3. –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–ù–´–• –ó–ê–ü–ò–°–ï–ô
    console.log('3. –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–ù–´–• –ó–ê–ü–ò–°–ï–ô');
    console.log('=' .repeat(50));
    
    // –ó–∞–ø–∏—Å–∏ –≥–¥–µ check_out < check_in
    const problematicRecords = await queryRows(`
      SELECT employee_number, date, check_in, check_out, hours_worked, status
      FROM time_records 
      WHERE check_in IS NOT NULL 
        AND check_out IS NOT NULL 
        AND check_out < check_in
      ORDER BY date DESC
      LIMIT 10
    `);
    
    console.log(`–ó–∞–ø–∏—Å–∏ –≥–¥–µ –≤—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞ –º–µ–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—Ö–æ–¥–∞ (${problematicRecords.length} –∑–∞–ø–∏—Å–µ–π):`);
    problematicRecords.forEach(record => {
      console.log(`‚ùå ${record.employee_number} | ${record.date} | ${record.check_in} - ${record.check_out} | ${record.hours_worked}—á | ${record.status}`);
    });
    console.log();
    
    // –ó–∞–ø–∏—Å–∏ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∏–ª–∏ –±–æ–ª—å—à–∏–º–∏ —á–∞—Å–∞–º–∏
    const invalidHours = await queryRows(`
      SELECT employee_number, date, check_in, check_out, hours_worked, status
      FROM time_records 
      WHERE hours_worked < 0 OR hours_worked > 24
      ORDER BY hours_worked DESC
      LIMIT 10
    `);
    
    console.log(`–ó–∞–ø–∏—Å–∏ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —á–∞—Å–æ–≤ (${invalidHours.length} –∑–∞–ø–∏—Å–µ–π):`);
    invalidHours.forEach(record => {
      console.log(`‚ö†Ô∏è  ${record.employee_number} | ${record.date} | ${record.check_in} - ${record.check_out} | ${record.hours_worked}—á | ${record.status}`);
    });
    console.log();

    // 4. –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –°–û–¢–†–£–î–ù–ò–ö–û–í –° –ì–†–ê–§–ò–ö–ê–ú–ò
    console.log('4. –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –°–û–¢–†–£–î–ù–ò–ö–û–í –° –ù–ê–ó–ù–ê–ß–ï–ù–ù–´–ú–ò –ì–†–ê–§–ò–ö–ê–ú–ò');
    console.log('=' .repeat(50));
    
    // –ù–∞–π–¥–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –ª—é–±—ã–º–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º–∏ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
    const employeesWithSchedules = await queryRows(`
      SELECT DISTINCT esa.employee_number, e.full_name, esa.schedule_code, ws.schedule_name, ws.work_hours
      FROM employee_schedule_assignments esa
      JOIN employees e ON e.table_number = esa.employee_number
      JOIN work_schedules_1c ws ON ws.schedule_code = esa.schedule_code
      WHERE (esa.end_date IS NULL OR esa.end_date >= CURRENT_DATE)
      ORDER BY ws.work_hours DESC
      LIMIT 5
    `);
    
    console.log(`–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º–∏ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ (${employeesWithSchedules.length} —á–µ–ª–æ–≤–µ–∫):`);
    
    for (const emp of employeesWithSchedules) {
      console.log(`\nüë§ ${emp.employee_number} - ${emp.full_name}`);
      console.log(`   –ì—Ä–∞—Ñ–∏–∫: ${emp.schedule_code} - ${emp.schedule_name || '–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'} (${emp.work_hours}—á)`);
      
      // –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
      const empProblems = await queryRows(`
        SELECT date, check_in, check_out, hours_worked, status
        FROM time_records 
        WHERE employee_number = $1
          AND (check_out < check_in OR hours_worked < 0 OR hours_worked > 24)
          AND date >= CURRENT_DATE - INTERVAL '30 days'
        ORDER BY date DESC
        LIMIT 5
      `, [emp.employee_number]);
      
      // –û–±—ã—á–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      const empRecords = await queryRows(`
        SELECT date, check_in, check_out, hours_worked, status
        FROM time_records 
        WHERE employee_number = $1
          AND date >= CURRENT_DATE - INTERVAL '7 days'
        ORDER BY date DESC
        LIMIT 3
      `, [emp.employee_number]);
      
      if (empProblems.length > 0) {
        console.log(`   ‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (${empProblems.length}):`);
        empProblems.forEach(prob => {
          console.log(`      ${prob.date}: ${prob.check_in} - ${prob.check_out} (${prob.hours_worked}—á) ${prob.status}`);
        });
      } else {
        console.log(`   ‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
      }
      
      if (empRecords.length > 0) {
        console.log(`   üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏:`);
        empRecords.forEach(record => {
          console.log(`      ${record.date}: ${record.check_in || '–Ω–µ—Ç'} - ${record.check_out || '–Ω–µ—Ç'} (${record.hours_worked || 0}—á) ${record.status || ''}`);
        });
      }
    }

    // 5. –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –í–°–ï–ú –ì–†–ê–§–ò–ö–ê–ú
    console.log('\n5. –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ì–†–ê–§–ò–ö–ê–ú');
    console.log('=' .repeat(50));
    
    const scheduleStats = await queryRows(`
      SELECT 
        COUNT(*) as total_schedules,
        COUNT(CASE WHEN work_hours > 12 THEN 1 END) as long_shifts,
        AVG(work_hours) as avg_hours,
        MIN(work_hours) as min_hours,
        MAX(work_hours) as max_hours
      FROM (
        SELECT DISTINCT schedule_code, work_hours
        FROM work_schedules_1c
      ) as unique_schedules
    `);
    
    if (scheduleStats.length > 0) {
      const stats = scheduleStats[0];
      console.log(`–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤: ${stats.total_schedules}`);
      console.log(`–î–ª–∏–Ω–Ω—ã—Ö —Å–º–µ–Ω (>12—á): ${stats.long_shifts}`);
      console.log(`–°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${Math.round(stats.avg_hours * 100) / 100}—á`);
      console.log(`–ú–∏–Ω/–ú–∞–∫—Å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${stats.min_hours}—á - ${stats.max_hours}—á`);
    }

    // 6. –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú –†–ê–°–ß–ï–¢–ê –í–†–ï–ú–ï–ù–ò
    console.log('\n6. –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú –†–ê–°–ß–ï–¢–ê –í–†–ï–ú–ï–ù–ò');
    console.log('=' .repeat(50));
    
    // –ü—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞—Å—á–µ—Ç–æ–º –Ω–æ—á–Ω—ã—Ö —Å–º–µ–Ω
    console.log('–í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:');
    console.log('1. ‚ùå –í —Ç–∞–±–ª–∏—Ü–µ work_schedules_1c –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏ work_start_time –∏ work_end_time');
    console.log('   –ï—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ work_hours');
    console.log('');
    console.log('2. ‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ê–ü00-00467 –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ, –Ω–æ:');
    console.log('   - –ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã');
    console.log('   - –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞');
    console.log('   - –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤—Ä–µ–º–µ–Ω–∏');
    console.log('');
    console.log('3. ‚úÖ –ù–∞–π–¥–µ–Ω—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–∏:');
    console.log('   - –ê–ü00-00231: –µ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è –∏ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏');
    console.log('   - –ê–ü00-00358: –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏ (—Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)');
    console.log('   - –ê–ü00-00020: –≤ –±–∞–∑–µ, –Ω–æ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
    console.log('');
    console.log('4. ‚ö†Ô∏è  –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:');
    console.log('   - work_schedules_1c —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Å–∞—Ö —Ä–∞–±–æ—Ç—ã');
    console.log('   - –ù–µ—Ç —Ç–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞/–æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω');
    console.log('   - –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ—á–Ω—ã–µ —Å–º–µ–Ω—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏');
    console.log('');
    console.log('–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('- –î–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–æ–Ω–∫–∏ work_start_time –∏ work_end_time –≤ work_schedules_1c');
    console.log('- –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –∏–∑ 1–°');
    console.log('- –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ê–ü00-00467');
    console.log('- –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –Ω–æ—á–Ω—ã—Ö —Å–º–µ–Ω');

    console.log('\n=== –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù ===');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:', error);
  } finally {
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
analyzeNightShifts().catch(console.error);