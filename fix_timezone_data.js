const db = require('./backend/database_pg');

async function fixTimezoneData() {
    try {
        console.log('üïê –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–æ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ time_events...\n');
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        const allEvents = await db.query(`
            SELECT id, employee_number, event_datetime, event_type, object_code
            FROM time_events 
            WHERE employee_number = '–ê–ü00-00231'
            ORDER BY event_datetime
        `);
        
        console.log(`–ù–∞–π–¥–µ–Ω–æ ${allEvents.rows.length} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è`);
        
        let fixedCount = 0;
        
        for (const event of allEvents.rows) {
            try {
                // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ë–î –∏–º–µ–µ—Ç GMT+2, –Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å UTC+6
                // –ó–Ω–∞—á–∏—Ç –Ω—É–∂–Ω–æ –≤—ã—á–µ—Å—Ç—å 2 —á–∞—Å–∞ –∏ –¥–æ–±–∞–≤–∏—Ç—å 6 —á–∞—Å–æ–≤ = +4 —á–∞—Å–∞
                const currentTime = new Date(event.event_datetime);
                
                // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "YYYY-MM-DD HH:mm:ss"
                const timeString = currentTime.toISOString().slice(0, 19).replace('T', ' ');
                
                // –ü–∞—Ä—Å–∏–º –∫–∞–∫ –≤—Ä–µ–º—è –≤ –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–æ–π –∑–æ–Ω–µ (UTC+6)
                const correctTime = new Date(timeString + '+06:00');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
                await db.query(`
                    UPDATE time_events 
                    SET event_datetime = $1, updated_at = CURRENT_TIMESTAMP
                    WHERE id = $2
                `, [correctTime.toISOString(), event.id]);
                
                fixedCount++;
                
                if (fixedCount <= 5) {
                    console.log(`–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${fixedCount}: ${event.event_datetime} ‚Üí ${correctTime.toISOString()}`);
                }
                
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ ${event.id}:`, error.message);
            }
        }
        
        console.log(`\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${fixedCount} –∑–∞–ø–∏—Å–µ–π`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const updatedEvents = await db.query(`
            SELECT event_datetime, event_type
            FROM time_events 
            WHERE employee_number = '–ê–ü00-00231'
            ORDER BY event_datetime
            LIMIT 5
        `);
        
        console.log('\n=== –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï (–ø–µ—Ä–≤—ã–µ 5) ===');
        updatedEvents.rows.forEach((row, index) => {
            console.log(`${index + 1}. ${row.event_datetime} - –¢–∏–ø: ${row.event_type}`);
        });
        
        // –°—Ä–∞–≤–Ω–∏–º —Å API –¥–∞–Ω–Ω—ã–º–∏
        console.log('\n=== –°–†–ê–í–ù–ï–ù–ò–ï –° API ===');
        const apiData = [
            { "event_datetime": "2025-05-01 09:04:42", "event": "1" },
            { "event_datetime": "2025-05-01 19:16:13", "event": "2" },
            { "event_datetime": "2025-05-02 09:09:56", "event": "1" },
            { "event_datetime": "2025-05-02 09:39:53", "event": "1" },
            { "event_datetime": "2025-05-02 19:11:51", "event": "2" }
        ];
        
        apiData.forEach((item, index) => {
            const dbTime = new Date(updatedEvents.rows[index].event_datetime);
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            const dbLocalTime = new Date(dbTime.getTime() + (6 * 60 * 60 * 1000)); // UTC+6
            const formattedDbTime = dbLocalTime.toISOString().slice(0, 19).replace('T', ' ');
            
            console.log(`${index + 1}. API: ${item.event_datetime} | –ë–î: ${formattedDbTime} | –°–æ–≤–ø–∞–¥–∞–µ—Ç: ${item.event_datetime === formattedDbTime ? '‚úÖ' : '‚ùå'}`);
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    } finally {
        process.exit(0);
    }
}

fixTimezoneData();