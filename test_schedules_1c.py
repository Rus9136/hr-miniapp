#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–∞–±–æ—Ç—ã –∏–∑ 1–°
Production URL: https://madlen.space
"""

import requests
import json
from datetime import datetime

# Base URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
BASE_URL = "https://madlen.space/api"

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
TEST_SCHEDULE_CODE = "76c06530-1aad-11f0-90de-3cecef8cc60b"  # 05:00-17:00/MG 1 —Å–º–µ–Ω–∞
TEST_EMPLOYEE_NUMBER = "–ê–ü00-00358"  # –°—É–∏–Ω–¥–∏–∫–æ–≤–∞ –°–∞–π—Ä–∞—à –ê–≥–∞–±–µ–∫–æ–≤–Ω–∞


class TestSchedules1C:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ –∏–∑ 1–°"""
    
    def test_get_schedules_list(self):
        """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏–∑ 1–°"""
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = requests.get(f"{BASE_URL}/admin/schedules/1c/list")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥
        assert response.status_code == 200, f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 200, –ø–æ–ª—É—á–µ–Ω {response.status_code}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
        data = response.json()
        assert isinstance(data, list), "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏
        assert len(data) > 0, "–°–ø–∏—Å–æ–∫ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
        first_schedule = data[0]
        required_fields = ['schedule_name', 'schedule_code', 'work_days_count', 
                          'start_date', 'end_date', 'avg_hours']
        
        for field in required_fields:
            assert field in first_schedule, f"–ü–æ–ª–µ '{field}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –≥—Ä–∞—Ñ–∏–∫–µ"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –Ω–∞—à —Ç–µ—Å—Ç–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫
        test_schedule = next((s for s in data if s['schedule_code'] == TEST_SCHEDULE_CODE), None)
        assert test_schedule is not None, f"–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ {TEST_SCHEDULE_CODE} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        assert test_schedule['schedule_name'] == "05:00-17:00/MG 1 —Å–º–µ–Ω–∞"
        
        print(f"‚úÖ –¢–µ—Å—Ç 1 –ø—Ä–æ–π–¥–µ–Ω: –ü–æ–ª—É—á–µ–Ω–æ {len(data)} –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏–∑ 1–°")
        print(f"   –ü—Ä–∏–º–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞: {first_schedule['schedule_name']}")
        
    def test_get_schedule_details(self):
        """–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –≥—Ä–∞—Ñ–∏–∫–µ"""
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = requests.get(f"{BASE_URL}/admin/schedules/1c", 
                              params={'scheduleCode': TEST_SCHEDULE_CODE})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥
        assert response.status_code == 200, f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 200, –ø–æ–ª—É—á–µ–Ω {response.status_code}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        data = response.json()
        assert 'schedules' in data, "–í –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–µ 'schedules'"
        
        schedules = data['schedules']
        assert isinstance(schedules, list), "schedules –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º"
        assert len(schedules) > 0, "–°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
        first_day = schedules[0]
        required_fields = ['schedule_name', 'schedule_code', 'work_date', 
                          'work_month', 'time_type', 'work_hours']
        
        for field in required_fields:
            assert field in first_day, f"–ü–æ–ª–µ '{field}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ä–∞–±–æ—á–µ–º –¥–Ω–µ"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
        assert first_day['schedule_code'] == TEST_SCHEDULE_CODE
        assert first_day['schedule_name'] == "05:00-17:00/MG 1 —Å–º–µ–Ω–∞"
        assert first_day['work_hours'] == 11, "–û–∂–∏–¥–∞–ª–æ—Å—å 11 —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã"
        assert first_day['time_type'] == "–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –µ—Å–ª–∏ –æ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è
        if 'statistics' in data:
            stats = data['statistics']
            print(f"   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –≤—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π - {stats.get('total_work_days', len(schedules))}")
        
        print(f"‚úÖ –¢–µ—Å—Ç 2 –ø—Ä–æ–π–¥–µ–Ω: –ü–æ–ª—É—á–µ–Ω–æ {len(schedules)} —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞")
        print(f"   –ì—Ä–∞—Ñ–∏–∫: {first_day['schedule_name']}")
        print(f"   –ü–µ—Ä–∏–æ–¥: —Å {schedules[0]['work_date'][:10]} –ø–æ {schedules[-1]['work_date'][:10]}")
        
    def test_employee_schedule_assignment(self):
        """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞"""
        # –ß–∞—Å—Ç—å 1: –ù–∞–∑–Ω–∞—á–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É + 10 –¥–Ω–µ–π –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        from datetime import timedelta
        future_date = (datetime.now() + timedelta(days=10)).strftime("%Y-%m-%d")
        
        assignment_data = {
            "employee_number": TEST_EMPLOYEE_NUMBER,
            "schedule_code": TEST_SCHEDULE_CODE,
            "start_date": future_date
        }
        
        response = requests.post(f"{BASE_URL}/admin/schedules/assign-employee",
                               json=assignment_data,
                               headers={'Content-Type': 'application/json'})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        assert response.status_code == 200, f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 200, –ø–æ–ª—É—á–µ–Ω {response.status_code}"
        
        data = response.json()
        assert data.get('success') == True, "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º"
        assert 'assignment' in data, "–í –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏"
        
        assignment = data['assignment']
        assert assignment['employee_number'] == TEST_EMPLOYEE_NUMBER
        assert assignment['schedule_code'] == TEST_SCHEDULE_CODE
        
        print(f"‚úÖ –¢–µ—Å—Ç 3.1 –ø—Ä–æ–π–¥–µ–Ω: –ì—Ä–∞—Ñ–∏–∫ —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É")
        print(f"   –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {assignment.get('employee_name', TEST_EMPLOYEE_NUMBER)}")
        print(f"   –ì—Ä–∞—Ñ–∏–∫: {assignment.get('schedule_name', TEST_SCHEDULE_CODE)}")
        
        # –ß–∞—Å—Ç—å 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        response = requests.get(f"{BASE_URL}/admin/employees/{TEST_EMPLOYEE_NUMBER}/current-schedule")
        
        assert response.status_code == 200, f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 200, –ø–æ–ª—É—á–µ–Ω {response.status_code}"
        
        data = response.json()
        assert data.get('success') == True, "–ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º"
        assert 'schedule' in data, "–í –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä–∞—Ñ–∏–∫–µ"
        
        current_schedule = data['schedule']
        assert current_schedule['employee_number'] == TEST_EMPLOYEE_NUMBER
        assert current_schedule['schedule_code'] == TEST_SCHEDULE_CODE
        
        print(f"‚úÖ –¢–µ—Å—Ç 3.2 –ø—Ä–æ–π–¥–µ–Ω: –¢–µ–∫—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω")
        print(f"   –ù–∞—á–∞–ª–æ –¥–µ–π—Å—Ç–≤–∏—è: {current_schedule['start_date'][:10]}")
        
        # –ß–∞—Å—Ç—å 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≥—Ä–∞—Ñ–∏–∫–æ–≤
        response = requests.get(f"{BASE_URL}/admin/employees/{TEST_EMPLOYEE_NUMBER}/schedule-history")
        
        assert response.status_code == 200, f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 200, –ø–æ–ª—É—á–µ–Ω {response.status_code}"
        
        data = response.json()
        assert data.get('success') == True, "–ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º"
        assert 'history' in data, "–í –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å—Ç–æ—Ä–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤"
        
        history = data['history']
        assert len(history) > 0, "–ò—Å—Ç–æ—Ä–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—É—Å—Ç–æ–π"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
        active_schedules = [h for h in history if h.get('status') == 'active']
        assert len(active_schedules) > 0, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫"
        
        print(f"‚úÖ –¢–µ—Å—Ç 3.3 –ø—Ä–æ–π–¥–µ–Ω: –ò—Å—Ç–æ—Ä–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ–ª—É—á–µ–Ω–∞")
        print(f"   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(history)}")
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤: {len(active_schedules)}")


def run_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–∞–±–æ—Ç—ã –∏–∑ 1–°")
    print(f"üìç –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–π URL: {BASE_URL}")
    print(f"üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("-" * 60)
    
    test_suite = TestSchedules1C()
    
    try:
        # –¢–µ—Å—Ç 1
        print("\nüìã –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤")
        test_suite.test_get_schedules_list()
        
        # –¢–µ—Å—Ç 2
        print("\nüìã –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä–∞—Ñ–∏–∫–µ")
        test_suite.test_get_schedule_details()
        
        # –¢–µ—Å—Ç 3
        print("\nüìã –¢–µ—Å—Ç 3: –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É")
        test_suite.test_employee_schedule_assignment()
        
        print("\n" + "=" * 60)
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        print("=" * 60)
        
    except AssertionError as e:
        print(f"\n‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {str(e)}")
        raise
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: {str(e)}")
        raise


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –Ω–∞–ø—Ä—è–º—É—é
    run_tests()