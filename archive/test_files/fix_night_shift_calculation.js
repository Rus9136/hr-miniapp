const { pool, queryRows, queryRow, query } = require('./backend/database_pg');

async function fixNightShiftCalculation() {
  try {
    console.log('=== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–°–ß–ï–¢–ê –ù–û–ß–ù–´–• –°–ú–ï–ù ===\n');

    // 1. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —á–∞—Å–æ–≤ –¥–ª—è –Ω–æ—á–Ω—ã—Ö —Å–º–µ–Ω
    function calculateNightShiftHours(checkIn, checkOut) {
      const inTime = new Date(checkIn);
      const outTime = new Date(checkOut);
      
      // –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞ –º–µ–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—Ö–æ–¥–∞, –∑–Ω–∞—á–∏—Ç —Å–º–µ–Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å
      if (outTime < inTime) {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—É—Ç–∫–∏ –∫ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã—Ö–æ–¥–∞
        outTime.setDate(outTime.getDate() + 1);
      }
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω–æ—Å—Ç—å –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∞—Å—ã
      const diffMs = outTime.getTime() - inTime.getTime();
      const diffHours = diffMs / (1000 * 60 * 60);
      
      return Math.round(diffHours * 100) / 100; // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤
    }

    // 2. –ù–∞–π–¥–µ–º –≤—Å–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —Å –Ω–æ—á–Ω—ã–º–∏ —Å–º–µ–Ω–∞–º–∏
    console.log('1. –ü–û–ò–°–ö –ü–†–û–ë–õ–ï–ú–ù–´–• –ó–ê–ü–ò–°–ï–ô –ù–û–ß–ù–´–• –°–ú–ï–ù');
    console.log('=' .repeat(60));
    
    const problematicRecords = await queryRows(`
      SELECT tr.*, ws.work_start_time, ws.work_end_time, ws.schedule_name
      FROM time_records tr
      LEFT JOIN employee_schedule_assignments esa ON esa.employee_number = tr.employee_number
        AND (esa.end_date IS NULL OR esa.end_date >= tr.date)
        AND esa.start_date <= tr.date
      LEFT JOIN work_schedules_1c ws ON ws.schedule_code = esa.schedule_code
        AND ws.work_date = tr.date
      WHERE tr.hours_worked < 0 
         OR tr.status = 'night_shift_error'
         OR (ws.work_start_time > ws.work_end_time)
      ORDER BY tr.date DESC
    `);
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: ${problematicRecords.length}`);
    
    for (const record of problematicRecords) {
      console.log(`\n‚ùå ${record.employee_number} | ${record.date}`);
      console.log(`   –í—Ö–æ–¥: ${record.check_in}`);
      console.log(`   –í—ã—Ö–æ–¥: ${record.check_out}`);
      console.log(`   –¢–µ–∫—É—â–∏–µ —á–∞—Å—ã: ${record.hours_worked}—á`);
      console.log(`   –ì—Ä–∞—Ñ–∏–∫: ${record.schedule_name || '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}`);
      console.log(`   –í—Ä–µ–º—è –≥—Ä–∞—Ñ–∏–∫–∞: ${record.work_start_time || '–Ω–µ—Ç'} - ${record.work_end_time || '–Ω–µ—Ç'}`);
      
      if (record.check_in && record.check_out) {
        const correctHours = calculateNightShiftHours(record.check_in, record.check_out);
        console.log(`   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —á–∞—Å—ã: ${correctHours}—á`);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        let status = 'night_shift';
        if (record.work_start_time && record.work_end_time) {
          const scheduleStart = record.work_start_time;
          const scheduleEnd = record.work_end_time;
          const checkInTime = new Date(record.check_in).toTimeString().substr(0, 5);
          
          if (checkInTime <= scheduleStart || checkInTime >= '23:00') {
            status = 'night_shift_on_time';
          } else {
            status = 'night_shift_late';
          }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
        await query(`
          UPDATE time_records 
          SET hours_worked = $1, status = $2, off_schedule = false, updated_at = CURRENT_TIMESTAMP
          WHERE id = $3
        `, [correctHours, status, record.id]);
        
        console.log(`   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${correctHours}—á, —Å—Ç–∞—Ç—É—Å: ${status}`);
      }
    }

    // 3. –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –Ω–æ—á–Ω—ã—Ö —Å–º–µ–Ω
    console.log('\n\n2. –°–û–ó–î–ê–ù–ò–ï –§–£–ù–ö–¶–ò–ò –†–ê–°–ß–ï–¢–ê –ù–û–ß–ù–´–• –°–ú–ï–ù');
    console.log('=' .repeat(60));
    
    // –°–æ–∑–¥–∞–µ–º SQL —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —á–∞—Å–æ–≤ –Ω–æ—á–Ω—ã—Ö —Å–º–µ–Ω
    await query(`
      CREATE OR REPLACE FUNCTION calculate_night_shift_hours(
        check_in_time TIMESTAMP,
        check_out_time TIMESTAMP
      ) RETURNS DECIMAL AS $$
      DECLARE
        hours_worked DECIMAL;
        adjusted_check_out TIMESTAMP;
      BEGIN
        -- –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞ –º–µ–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—Ö–æ–¥–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Å—É—Ç–∫–∏
        IF check_out_time::TIME < check_in_time::TIME THEN
          adjusted_check_out := check_out_time + INTERVAL '1 day';
        ELSE
          adjusted_check_out := check_out_time;
        END IF;
        
        -- –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∞—Å—ã
        hours_worked := EXTRACT(EPOCH FROM (adjusted_check_out - check_in_time)) / 3600;
        
        -- –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤
        RETURN ROUND(hours_worked, 2);
      END;
      $$ LANGUAGE plpgsql;
    `);
    
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ SQL —Ñ—É–Ω–∫—Ü–∏—è calculate_night_shift_hours()');

    // 4. –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
    console.log('\n3. –ü–ï–†–ï–°–ß–ï–¢ –í–°–ï–• –ó–ê–ü–ò–°–ï–ô –í–†–ï–ú–ï–ù–ò');
    console.log('=' .repeat(60));
    
    const allRecords = await queryRows(`
      SELECT tr.*, esa.schedule_code, ws.work_start_time, ws.work_end_time
      FROM time_records tr
      LEFT JOIN employee_schedule_assignments esa ON esa.employee_number = tr.employee_number
        AND (esa.end_date IS NULL OR esa.end_date >= tr.date)
        AND esa.start_date <= tr.date
      LEFT JOIN work_schedules_1c ws ON ws.schedule_code = esa.schedule_code
        AND ws.work_date = tr.date
      WHERE tr.check_in IS NOT NULL AND tr.check_out IS NOT NULL
      ORDER BY tr.date DESC
    `);
    
    console.log(`–ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º ${allRecords.length} –∑–∞–ø–∏—Å–µ–π...`);
    
    let updated = 0;
    let nightShifts = 0;
    
    for (const record of allRecords) {
      const isNightShift = record.work_start_time && record.work_end_time && 
                          record.work_start_time > record.work_end_time;
      
      if (isNightShift) {
        nightShifts++;
        const correctHours = calculateNightShiftHours(record.check_in, record.check_out);
        
        if (Math.abs(correctHours - parseFloat(record.hours_worked)) > 0.1) {
          await query(`
            UPDATE time_records 
            SET hours_worked = calculate_night_shift_hours($1, $2),
                status = CASE 
                  WHEN status LIKE '%night_shift%' OR hours_worked < 0 THEN 'night_shift_fixed'
                  ELSE status
                END,
                updated_at = CURRENT_TIMESTAMP
            WHERE id = $3
          `, [record.check_in, record.check_out, record.id]);
          
          updated++;
        }
      }
    }
    
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${updated}`);
    console.log(`üìä –ù–æ—á–Ω—ã—Ö —Å–º–µ–Ω –Ω–∞–π–¥–µ–Ω–æ: ${nightShifts}`);

    // 5. –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    console.log('\n4. –°–û–ó–î–ê–ù–ò–ï –¢–†–ò–ì–ì–ï–†–ê –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –†–ê–°–ß–ï–¢–ê');
    console.log('=' .repeat(60));
    
    // –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ç—Ä–∏–≥–≥–µ—Ä–∞
    await query(`
      CREATE OR REPLACE FUNCTION auto_calculate_work_hours()
      RETURNS TRIGGER AS $$
      DECLARE
        schedule_start_time TIME;
        schedule_end_time TIME;
        is_night_shift BOOLEAN;
      BEGIN
        -- –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä–∞—Ñ–∏–∫–µ —Ä–∞–±–æ—Ç—ã
        SELECT ws.work_start_time, ws.work_end_time
        INTO schedule_start_time, schedule_end_time
        FROM employee_schedule_assignments esa
        JOIN work_schedules_1c ws ON ws.schedule_code = esa.schedule_code
        WHERE esa.employee_number = NEW.employee_number
          AND (esa.end_date IS NULL OR esa.end_date >= NEW.date)
          AND esa.start_date <= NEW.date
          AND ws.work_date = NEW.date
        LIMIT 1;
        
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –Ω–æ—á–Ω–æ–π —Å–º–µ–Ω–æ–π
        is_night_shift := (schedule_start_time IS NOT NULL AND 
                          schedule_end_time IS NOT NULL AND 
                          schedule_start_time > schedule_end_time);
        
        -- –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–º—è –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∞—Å—ã
        IF NEW.check_in IS NOT NULL AND NEW.check_out IS NOT NULL THEN
          IF is_night_shift THEN
            NEW.hours_worked := calculate_night_shift_hours(NEW.check_in, NEW.check_out);
            IF NEW.status IS NULL OR NEW.status = 'night_shift_error' THEN
              NEW.status := 'night_shift_auto';
            END IF;
          ELSE
            -- –û–±—ã—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª—è –¥–Ω–µ–≤–Ω—ã—Ö —Å–º–µ–Ω
            NEW.hours_worked := EXTRACT(EPOCH FROM (NEW.check_out - NEW.check_in)) / 3600;
            NEW.hours_worked := ROUND(NEW.hours_worked, 2);
          END IF;
        END IF;
        
        RETURN NEW;
      END;
      $$ LANGUAGE plpgsql;
    `);
    
    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä
    await query(`
      DROP TRIGGER IF EXISTS trigger_auto_calculate_work_hours ON time_records;
      CREATE TRIGGER trigger_auto_calculate_work_hours
        BEFORE INSERT OR UPDATE ON time_records
        FOR EACH ROW
        EXECUTE FUNCTION auto_calculate_work_hours();
    `);
    
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω —Ç—Ä–∏–≥–≥–µ—Ä auto_calculate_work_hours –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞');

    // 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    console.log('\n5. –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô');
    console.log('=' .repeat(60));
    
    const fixedRecords = await queryRows(`
      SELECT tr.*, esa.schedule_code, ws.work_start_time, ws.work_end_time, ws.schedule_name
      FROM time_records tr
      LEFT JOIN employee_schedule_assignments esa ON esa.employee_number = tr.employee_number
        AND (esa.end_date IS NULL OR esa.end_date >= tr.date)
        AND esa.start_date <= tr.date
      LEFT JOIN work_schedules_1c ws ON ws.schedule_code = esa.schedule_code
        AND ws.work_date = tr.date
      WHERE tr.employee_number = '–ê–ü00-00467'
      ORDER BY tr.date DESC
    `);
    
    console.log(`–ó–∞–ø–∏—Å–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ê–ü00-00467 –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:`);
    fixedRecords.forEach(record => {
      const isNightShift = record.work_start_time && record.work_end_time && 
                          record.work_start_time > record.work_end_time;
      console.log(`\nüìÖ ${record.date}`);
      console.log(`   –í—Ö–æ–¥:  ${record.check_in}`);
      console.log(`   –í—ã—Ö–æ–¥: ${record.check_out}`);
      console.log(`   –ß–∞—Å–æ–≤: ${record.hours_worked}—á`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${record.status}`);
      console.log(`   –ì—Ä–∞—Ñ–∏–∫: ${record.schedule_name || '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}`);
      console.log(`   ${isNightShift ? 'üåô –ù–û–ß–ù–ê–Ø –°–ú–ï–ù–ê' : '‚òÄÔ∏è –î–ù–ï–í–ù–ê–Ø –°–ú–ï–ù–ê'}`);
    });

    // 7. –¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞
    console.log('\n6. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –¢–†–ò–ì–ì–ï–†–ê');
    console.log('=' .repeat(60));
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞
    await query(`
      INSERT INTO time_records 
      (employee_number, date, check_in, check_out)
      VALUES 
      ('–ê–ü00-00467', '2025-06-04', '2025-06-03 22:00:00', '2025-06-04 06:00:00')
      ON CONFLICT (employee_number, date) DO UPDATE SET
        check_in = EXCLUDED.check_in,
        check_out = EXCLUDED.check_out
    `);
    
    const testRecord = await queryRow(`
      SELECT * FROM time_records 
      WHERE employee_number = '–ê–ü00-00467' AND date = '2025-06-04'
    `);
    
    if (testRecord) {
      console.log('‚úÖ –¢—Ä–∏–≥–≥–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç! –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å:');
      console.log(`   –î–∞—Ç–∞: ${testRecord.date}`);
      console.log(`   –í—Ö–æ–¥: ${testRecord.check_in}`);
      console.log(`   –í—ã—Ö–æ–¥: ${testRecord.check_out}`);
      console.log(`   –ß–∞—Å–æ–≤: ${testRecord.hours_worked}—á (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ)`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${testRecord.status}`);
    }

    // 8. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\n7. –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê');
    console.log('=' .repeat(60));
    
    const stats = await queryRow(`
      SELECT 
        COUNT(*) as total_records,
        COUNT(CASE WHEN hours_worked < 0 THEN 1 END) as negative_hours,
        COUNT(CASE WHEN status LIKE '%night_shift%' THEN 1 END) as night_shift_records,
        COUNT(CASE WHEN status = 'night_shift_fixed' THEN 1 END) as fixed_records,
        AVG(hours_worked) as avg_hours
      FROM time_records
      WHERE check_in IS NOT NULL AND check_out IS NOT NULL
    `);
    
    console.log('–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–∏—Å–µ–π:');
    console.log(`- –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${stats.total_records}`);
    console.log(`- –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∞—Å–æ–≤: ${stats.negative_hours}`);
    console.log(`- –ù–æ—á–Ω—ã—Ö —Å–º–µ–Ω: ${stats.night_shift_records}`);
    console.log(`- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: ${stats.fixed_records}`);
    console.log(`- –°—Ä–µ–¥–Ω–∏–µ —á–∞—Å—ã: ${Math.round(stats.avg_hours * 100) / 100}—á`);

    console.log('\n=== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ===');
    console.log('\n–¢–µ–ø–µ—Ä—å —Å–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–æ—á–Ω—ã–µ —Å–º–µ–Ω—ã!');
    console.log('–í—Å–µ –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å—Å—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–º.');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏:', error);
  } finally {
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
fixNightShiftCalculation().catch(console.error);