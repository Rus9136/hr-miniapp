import pytest
import requests
import json
from datetime import datetime, timedelta

# Test configuration
API_BASE_URL = "http://localhost:3030/api"

class TestScheduleAssignment:
    """
    –¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–∞–±–æ—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç POST /api/admin/schedules/assign
    """
    
    def test_successful_schedule_assignment(self):
        """
        –¢–µ—Å—Ç 1: –£—Å–ø–µ—à–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ä–∞–±–æ—Ç—É API –ø—Ä–∏ –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        """
        print("\nüß™ –¢–µ—Å—Ç 1: –£—Å–ø–µ—à–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
        employees_response = requests.get(f"{API_BASE_URL}/admin/schedules/available-employees")
        assert employees_response.status_code == 200
        employees = employees_response.json()
        
        if len(employees) < 2:
            pytest.skip("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤
        templates_response = requests.get(f"{API_BASE_URL}/admin/schedules/templates")
        assert templates_response.status_code == 200
        templates = templates_response.json()
        
        if len(templates) == 0:
            pytest.skip("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞")
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —à–∞–±–ª–æ–Ω –∏ –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        template_id = templates[0]['id']
        employee_ids = [employees[0]['id'], employees[1]['id']]
        
        print(f"üìã –®–∞–±–ª–æ–Ω –≥—Ä–∞—Ñ–∏–∫–∞: {templates[0]['name']} (ID: {template_id})")
        print(f"üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏: {employees[0]['full_name']}, {employees[1]['full_name']}")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –±—É–¥—É—â—É—é –¥–∞—Ç—É)
        from datetime import datetime, timedelta
        future_date = (datetime.now() + timedelta(days=90)).strftime("%Y-%m-%d")
        
        payload = {
            "template_id": template_id,
            "employee_ids": employee_ids,
            "start_date": future_date,
            "assigned_by": "test_admin"
        }
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        response = requests.post(
            f"{API_BASE_URL}/admin/schedules/assign",
            json=payload,
            headers={"Content-Type": "application/json"}
        )
        
        print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
        assert response.status_code == 200
        result = response.json()
        
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
        assert result["success"] is True
        assert result["assignedCount"] >= 1  # –ú–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –µ—Å–ª–∏ —É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —É–∂–µ –µ—Å—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏
        assert "assignedCount" in result
        assert "message" in result
        
        print("‚úÖ –¢–µ—Å—Ç 1 –ø—Ä–æ–π–¥–µ–Ω: –ì—Ä–∞—Ñ–∏–∫ —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω")

    def test_schedule_validation_errors(self):
        """
        –¢–µ—Å—Ç 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        """
        print("\nüß™ –¢–µ—Å—Ç 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
        
        # –¢–µ—Å—Ç 2.1: –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π...")
        
        invalid_payloads = [
            # –ù–µ—Ç template_id
            {
                "employee_ids": [1],
                "start_date": "2025-07-01"
            },
            # –ù–µ—Ç employee_ids
            {
                "template_id": 1,
                "start_date": "2025-07-01"
            },
            # –ù–µ—Ç start_date
            {
                "template_id": 1,
                "employee_ids": [1]
            },
            # –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
            {
                "template_id": 1,
                "employee_ids": [],
                "start_date": "2025-07-01"
            }
        ]
        
        for i, payload in enumerate(invalid_payloads):
            print(f"  üìù –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ {i+1}/4")
            response = requests.post(
                f"{API_BASE_URL}/admin/schedules/assign",
                json=payload,
                headers={"Content-Type": "application/json"}
            )
            
            assert response.status_code == 400
            result = response.json()
            assert result["success"] is False
            assert "error" in result
            print(f"  ‚úÖ –û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {result['error']}")
        
        # –¢–µ—Å—Ç 2.2: –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —à–∞–±–ª–æ–Ω –≥—Ä–∞—Ñ–∏–∫–∞
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —à–∞–±–ª–æ–Ω–∞...")
        
        payload_invalid_template = {
            "template_id": 99999,  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID
            "employee_ids": [1],
            "start_date": "2025-07-01"
        }
        
        response = requests.post(
            f"{API_BASE_URL}/admin/schedules/assign",
            json=payload_invalid_template,
            headers={"Content-Type": "application/json"}
        )
        
        assert response.status_code == 400
        result = response.json()
        assert result["success"] is False
        assert "–Ω–µ –Ω–∞–π–¥–µ–Ω" in result["error"]
        print(f"  ‚úÖ –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —à–∞–±–ª–æ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {result['error']}")
        
        print("‚úÖ –¢–µ—Å—Ç 2 –ø—Ä–æ–π–¥–µ–Ω: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    def test_schedule_conflict_handling(self):
        """
        –¢–µ—Å—Ç 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
        """
        print("\nüß™ –¢–µ—Å—Ç 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –≥—Ä–∞—Ñ–∏–∫–æ–≤")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ —à–∞–±–ª–æ–Ω—ã
        employees_response = requests.get(f"{API_BASE_URL}/admin/schedules/available-employees")
        templates_response = requests.get(f"{API_BASE_URL}/admin/schedules/templates")
        
        if employees_response.status_code != 200 or templates_response.status_code != 200:
            pytest.skip("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞")
        
        employees = employees_response.json()
        templates = templates_response.json()
        
        if len(employees) < 1 or len(templates) < 1:
            pytest.skip("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤")
        
        # –í—ã–±–∏—Ä–∞–µ–º –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ –ø–µ—Ä–≤—ã–π —à–∞–±–ª–æ–Ω
        employee_id = employees[0]['id']
        template_id = templates[0]['id']
        
        print(f"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {employees[0]['full_name']}")
        print(f"üìã –®–∞–±–ª–æ–Ω: {templates[0]['name']}")
        
        # –ù–∞–∑–Ω–∞—á–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã)
        print("üìÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞...")
        from datetime import datetime, timedelta
        first_date = (datetime.now() + timedelta(days=30)).strftime("%Y-%m-%d")
        
        first_payload = {
            "template_id": template_id,
            "employee_ids": [employee_id],
            "start_date": first_date,
            "assigned_by": "test_admin"
        }
        
        first_response = requests.post(
            f"{API_BASE_URL}/admin/schedules/assign",
            json=first_payload,
            headers={"Content-Type": "application/json"}
        )
        
        print(f"üì° –ü–µ—Ä–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {first_response.status_code}")
        if first_response.status_code == 200:
            first_result = first_response.json()
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {first_result}")
        
        # –ù–∞–∑–Ω–∞—á–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤—Ç–æ—Ä–æ–π —Ä–∞–∑ (–¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –ø–µ—Ä–≤—ã–π)
        print("üìÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ (–∫–æ–Ω—Ñ–ª–∏–∫—Ç)...")
        second_date = (datetime.now() + timedelta(days=60)).strftime("%Y-%m-%d")
        
        second_payload = {
            "template_id": template_id,
            "employee_ids": [employee_id],
            "start_date": second_date,
            "assigned_by": "test_admin"
        }
        
        second_response = requests.post(
            f"{API_BASE_URL}/admin/schedules/assign",
            json=second_payload,
            headers={"Content-Type": "application/json"}
        )
        
        print(f"üì° –í—Ç–æ—Ä–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {second_response.status_code}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Ç–æ—Ä–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
        assert second_response.status_code == 200
        second_result = second_response.json()
        assert second_result["success"] is True
        
        print(f"‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω: {second_result}")
        print("‚úÖ –¢–µ—Å—Ç 3 –ø—Ä–æ–π–¥–µ–Ω: –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    def test_mass_assignment_with_mixed_results(self):
        """
        –¢–µ—Å—Ç 4: –ú–∞—Å—Å–æ–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å —á–∞—Å—Ç–∏—á–Ω—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ —á–∞—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        """
        print("\nüß™ –¢–µ—Å—Ç 4: –ú–∞—Å—Å–æ–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–∞–º–∏")
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã
        templates_response = requests.get(f"{API_BASE_URL}/admin/schedules/templates")
        if templates_response.status_code != 200:
            pytest.skip("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∞")
        
        templates = templates_response.json()
        if len(templates) == 0:
            pytest.skip("–ù–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        employees_response = requests.get(f"{API_BASE_URL}/admin/schedules/available-employees")
        if employees_response.status_code != 200:
            pytest.skip("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
        
        employees = employees_response.json()
        if len(employees) == 0:
            pytest.skip("–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞")
        
        template_id = templates[0]['id']
        real_employee_id = employees[0]['id']
        
        print(f"üìã –®–∞–±–ª–æ–Ω: {templates[0]['name']}")
        print(f"üë§ –†–µ–∞–ª—å–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: {employees[0]['full_name']}")
        print(f"‚ùå –§–∏–∫—Ç–∏–≤–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: ID 99999")
        
        # –°–º–µ—à–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫: —Ä–µ–∞–ª—å–Ω—ã–π + –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
        from datetime import datetime, timedelta
        test_date = (datetime.now() + timedelta(days=120)).strftime("%Y-%m-%d")
        
        payload_mixed = {
            "template_id": template_id,
            "employee_ids": [real_employee_id, 99999],  # –û–¥–∏–Ω —Ä–µ–∞–ª—å–Ω—ã–π, –æ–¥–∏–Ω —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π
            "start_date": test_date,
            "assigned_by": "test_admin"
        }
        
        response = requests.post(
            f"{API_BASE_URL}/admin/schedules/assign",
            json=payload_mixed,
            headers={"Content-Type": "application/json"}
        )
        
        print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å–ø–µ—Ö —Å —á–∞—Å—Ç–∏—á–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        assert response.status_code == 200
        result = response.json()
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
        assert result["success"] is True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –¥–∞—Ç)
        if "assignedCount" in result and "skippedCount" in result:
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–æ–ª–∂–Ω–æ —Ä–∞–≤–Ω—è—Ç—å—Å—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
            total_processed = result["assignedCount"] + result["skippedCount"]
            assert total_processed == 2  # –û—Ç–ø—Ä–∞–≤–∏–ª–∏ 2 ID (–æ–¥–∏–Ω —Ä–µ–∞–ª—å–Ω—ã–π, –æ–¥–∏–Ω —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π)
            assert result["skippedCount"] >= 1   # –ú–∏–Ω–∏–º—É–º –æ–¥–∏–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω (—Ñ–∏–∫—Ç–∏–≤–Ω—ã–π ID)
            print(f"‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–æ: {result['assignedCount']}, –ü—Ä–æ–ø—É—â–µ–Ω–æ: {result['skippedCount']}")
        else:
            print("‚ÑπÔ∏è –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è API")
        
        print("‚úÖ –¢–µ—Å—Ç 4 –ø—Ä–æ–π–¥–µ–Ω: –ß–∞—Å—Ç–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


if __name__ == "__main__":
    # –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤: python test_schedule_assignment_simple.py
    pytest.main([__file__, "-v", "-s"])