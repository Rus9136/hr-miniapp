const db = require('./backend/database_pg');

async function finalTimezoneTest() {
    try {
        console.log('üïê –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã...\n');
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É PostgreSQL
        const pgTz = await db.query('SHOW timezone');
        console.log(`PostgreSQL timezone: ${pgTz.rows[0].timezone || pgTz.rows[0].TimeZone}`);
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Ä–µ–º—è –≤ PostgreSQL
        const pgTime = await db.query('SELECT NOW() as now, NOW() AT TIME ZONE \'Asia/Almaty\' as almaty_time');
        console.log(`PostgreSQL NOW(): ${pgTime.rows[0].now}`);
        console.log(`PostgreSQL –≤ –ê–ª–º–∞—Ç—ã: ${pgTime.rows[0].almaty_time}`);
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∫ –±—É–¥–µ—Ç –≤ production
        const apiTime = "2025-05-01 09:04:42";
        console.log(`\n–ò—Å—Ö–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –∏–∑ API: ${apiTime}`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ (+05:00)
        const withTimezone = apiTime + '+05:00';
        console.log(`–í—Ä–µ–º—è —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º: ${withTimezone}`);
        
        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Date
        const dateObj = new Date(withTimezone);
        console.log(`Date –æ–±—ä–µ–∫—Ç: ${dateObj.toISOString()}`);
        console.log(`–í UTC: ${dateObj.getUTCFullYear()}-${String(dateObj.getUTCMonth()+1).padStart(2,'0')}-${String(dateObj.getUTCDate()).padStart(2,'0')} ${String(dateObj.getUTCHours()).padStart(2,'0')}:${String(dateObj.getUTCMinutes()).padStart(2,'0')}:${String(dateObj.getUTCSeconds()).padStart(2,'0')}`);
        
        // –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –ë–î
        console.log('\n--- –¢–ï–°–¢–ò–†–£–ï–ú –í–°–¢–ê–í–ö–£ –í –ë–î ---');
        await db.query('DELETE FROM time_events WHERE employee_number = \'TEST-FINAL\'');
        
        await db.query(`
            INSERT INTO time_events (employee_number, object_code, event_datetime, event_type)
            VALUES ($1, $2, $3, $4)
        `, ['TEST-FINAL', '5045', dateObj.toISOString(), '1']);
        
        // –ß–∏—Ç–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        const result = await db.query(`
            SELECT 
                event_datetime,
                event_datetime AT TIME ZONE 'UTC' AT TIME ZONE 'Asia/Almaty' as almaty_time
            FROM time_events 
            WHERE employee_number = 'TEST-FINAL'
        `);
        
        if (result.rows.length > 0) {
            const row = result.rows[0];
            console.log(`–í—Ä–µ–º—è –≤ –ë–î (raw): ${row.event_datetime}`);
            console.log(`–í—Ä–µ–º—è –≤ –ê–ª–º–∞—Ç—ã: ${row.almaty_time}`);
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã
            const almaty = row.almaty_time;
            const almatyStr = almaty.toISOString().slice(0, 19).replace('T', ' ');
            console.log(`–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ê–ª–º–∞—Ç—ã: ${almatyStr}`);
            
            console.log(`\n–°—Ä–∞–≤–Ω–µ–Ω–∏–µ:`);
            console.log(`API –≤—Ä–µ–º—è:        ${apiTime}`);
            console.log(`–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ:  ${almatyStr}`);
            console.log(`–°–æ–≤–ø–∞–¥–∞–µ—Ç: ${apiTime === almatyStr ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
        }
        
        // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
        await db.query('DELETE FROM time_events WHERE employee_number = \'TEST-FINAL\'');
        
        console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    } finally {
        process.exit(0);
    }
}

finalTimezoneTest();