const axios = require('axios');

async function comparePayrollLogic() {
    try {
        console.log('=== –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –∏ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –§–û–¢ ===\n');
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞ –Ω–µ–±–æ–ª—å—à–æ–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
        const params = {
            dateFrom: '2025-07-01',
            dateTo: '2025-07-03'  // 3 –¥–Ω—è
        };
        
        console.log(`–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞ –ø–µ—Ä–∏–æ–¥: ${params.dateFrom} - ${params.dateTo} (3 –¥–Ω—è)\n`);
        
        const response = await axios.get('http://localhost:3030/api/admin/reports/payroll', { params });
        
        if (response.data.success) {
            console.log('‚úÖ –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–ê):');
            console.log(`–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${response.data.data.length}`);
            console.log(`–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: ${response.data.summary.total} —Ç–µ–Ω–≥–µ`);
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            const employeeStats = {};
            let totalActualShifts = 0;
            
            response.data.data.forEach(record => {
                const key = record.table_number;
                if (!employeeStats[key]) {
                    employeeStats[key] = {
                        name: record.full_name,
                        monthly_payroll: record.payroll,
                        actual_shifts_in_period: 0,
                        total_shifts_for_calculation: record.shifts_count,
                        total_daily_payroll: 0
                    };
                }
                employeeStats[key].actual_shifts_in_period++;
                employeeStats[key].total_daily_payroll += record.daily_payroll;
                totalActualShifts++;
            });
            
            const employeeCount = Object.keys(employeeStats).length;
            const avgShiftsPerEmployee = totalActualShifts / employeeCount;
            
            console.log(`–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${employeeCount}`);
            console.log(`–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º–µ–Ω: ${totalActualShifts}`);
            console.log(`–°—Ä–µ–¥–Ω–µ–µ —Å–º–µ–Ω –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: ${avgShiftsPerEmployee.toFixed(1)}`);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ä–∞—Å—á–µ—Ç–æ–≤
            console.log('\nüìä –ü—Ä–∏–º–µ—Ä—ã —Ä–∞—Å—á–µ—Ç–æ–≤ (–Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞):');
            Object.values(employeeStats).slice(0, 2).forEach((emp, index) => {
                const dailyPayroll = emp.monthly_payroll / emp.total_shifts_for_calculation;
                console.log(`${index + 1}. ${emp.name}:`);
                console.log(`   –ú–µ—Å—è—á–Ω–∞—è –ó–ü: ${emp.monthly_payroll.toLocaleString('ru-RU')} —Ç–µ–Ω–≥–µ`);
                console.log(`   –°–º–µ–Ω –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ (—Ñ–∞–∫—Ç): ${emp.actual_shifts_in_period}`);
                console.log(`   –°–º–µ–Ω –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –§–û–¢: ${emp.total_shifts_for_calculation}`);
                console.log(`   –§–û–¢ –Ω–∞ –¥–µ–Ω—å: ${dailyPayroll.toFixed(2)} —Ç–µ–Ω–≥–µ`);
                console.log(`   –ò—Ç–æ–≥–æ –∑–∞ –ø–µ—Ä–∏–æ–¥: ${emp.total_daily_payroll.toFixed(2)} —Ç–µ–Ω–≥–µ`);
            });
            
            console.log('\nüîç –ß—Ç–æ –±—ã–ª–æ –±—ã –ø—Ä–∏ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ:');
            console.log(`‚ùå –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–≤–∞–ª–∞ –±—ã —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏:`);
            console.log(`   - –ü–æ 3 –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –¥–Ω—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ = ${employeeCount * 3} –∑–∞–ø–∏—Å–µ–π`);
            console.log(`   - –§–û–¢ –Ω–∞ –¥–µ–Ω—å —Å—á–∏—Ç–∞–ª—Å—è –∫–∞–∫ –º–µ—Å—è—á–Ω–∞—è_–ó–ü / –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ_–¥–Ω–∏_–≤_–º–µ—Å—è—Ü–µ`);
            console.log(`   - –†–µ–∑—É–ª—å—Ç–∞—Ç: –∏—Å–∫–∞–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ñ–∏–∫—Ç–∏–≤–Ω—ã–º–∏ —Å–º–µ–Ω–∞–º–∏`);
            
            console.log('\n‚úÖ –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ (–ü–†–ê–í–ò–õ–¨–ù–ê–Ø):');
            console.log(`   - –¢–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ —Å–º–µ–Ω—ã –∏–∑ –≥—Ä–∞—Ñ–∏–∫–æ–≤: ${totalActualShifts} –∑–∞–ø–∏—Å–µ–π`);
            console.log(`   - –§–û–¢ –Ω–∞ –¥–µ–Ω—å = –º–µ—Å—è—á–Ω–∞—è_–ó–ü / –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å–º–µ–Ω_–≤_–ø–µ—Ä–∏–æ–¥–µ`);
            console.log(`   - –†–µ–∑—É–ª—å—Ç–∞—Ç: —Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö —Å–º–µ–Ω`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ç–µ–º–∞—Ç–∏–∫—É
            const calculatedTotal = response.data.data.reduce((sum, row) => sum + row.daily_payroll, 0);
            console.log(`\nüßÆ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏:`);
            console.log(`–†–∞—Å—á–µ—Ç–Ω–∞—è —Å—É–º–º–∞: ${calculatedTotal.toFixed(2)} —Ç–µ–Ω–≥–µ`);
            console.log(`–°—É–º–º–∞ –≤ –æ—Ç—á–µ—Ç–µ: ${response.data.summary.total} —Ç–µ–Ω–≥–µ`);
            console.log(`–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: ${Math.abs(calculatedTotal - parseFloat(response.data.summary.total)).toFixed(2)} —Ç–µ–Ω–≥–µ`);
            
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç—á–µ—Ç–µ:', response.data.error);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.response?.data || error.message);
    }
}

comparePayrollLogic();