// Test script for 1C work schedules import
const API_BASE_URL = 'http://localhost:3030/api';

// Sample test data in the format that 1C will send
const testData = {
    "–î–∞—Ç–∞–í—ã–≥—Ä—É–∑–∫–∏": "2025-06-04T13:05:05",
    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ–ì—Ä–∞—Ñ–∏–∫–æ–≤": 2,
    "–ì—Ä–∞—Ñ–∏–∫–∏": [
        {
            "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–ì—Ä–∞—Ñ–∏–∫–∞": "05:00-17:00/MG 1 —Å–º–µ–Ω–∞",
            "–ö–æ–¥–ì—Ä–∞—Ñ–∏–∫–∞": "76c06530-1aad-11f0-90de-3cecef8cc60b",
            "–†–∞–±–æ—á–∏–µ–î–Ω–∏": [
                {
                    "–î–∞—Ç–∞": "2025-01-03",
                    "–ú–µ—Å—è—Ü": "2025-01-01",
                    "–í–∏–¥–£—á–µ—Ç–∞–í—Ä–µ–º–µ–Ω–∏": "–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è",
                    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ–ó–Ω–∞—á–µ–Ω–∏–µ": 11
                },
                {
                    "–î–∞—Ç–∞": "2025-01-04",
                    "–ú–µ—Å—è—Ü": "2025-01-01",
                    "–í–∏–¥–£—á–µ—Ç–∞–í—Ä–µ–º–µ–Ω–∏": "–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è",
                    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ–ó–Ω–∞—á–µ–Ω–∏–µ": 11
                },
                {
                    "–î–∞—Ç–∞": "2025-01-07",
                    "–ú–µ—Å—è—Ü": "2025-01-01",
                    "–í–∏–¥–£—á–µ—Ç–∞–í—Ä–µ–º–µ–Ω–∏": "–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è",
                    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ–ó–Ω–∞—á–µ–Ω–∏–µ": 11
                },
                {
                    "–î–∞—Ç–∞": "2025-01-08",
                    "–ú–µ—Å—è—Ü": "2025-01-01",
                    "–í–∏–¥–£—á–µ—Ç–∞–í—Ä–µ–º–µ–Ω–∏": "–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è",
                    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ–ó–Ω–∞—á–µ–Ω–∏–µ": 11
                }
            ]
        },
        {
            "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–ì—Ä–∞—Ñ–∏–∫–∞": "08:00-20:00/–ù–æ—á–Ω–∞—è —Å–º–µ–Ω–∞",
            "–ö–æ–¥–ì—Ä–∞—Ñ–∏–∫–∞": "87d17641-2bbe-22f1-91ef-4dfdg09dd71c",
            "–†–∞–±–æ—á–∏–µ–î–Ω–∏": [
                {
                    "–î–∞—Ç–∞": "2025-01-03",
                    "–ú–µ—Å—è—Ü": "2025-01-01",
                    "–í–∏–¥–£—á–µ—Ç–∞–í—Ä–µ–º–µ–Ω–∏": "–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è",
                    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ–ó–Ω–∞—á–µ–Ω–∏–µ": 12
                },
                {
                    "–î–∞—Ç–∞": "2025-01-04",
                    "–ú–µ—Å—è—Ü": "2025-01-01",
                    "–í–∏–¥–£—á–µ—Ç–∞–í—Ä–µ–º–µ–Ω–∏": "–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è",
                    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ–ó–Ω–∞—á–µ–Ω–∏–µ": 12
                }
            ]
        }
    ]
};

async function testImport() {
    try {
        console.log('üß™ Testing 1C schedules import...');
        console.log('üì§ Sending test data:', JSON.stringify(testData, null, 2));

        const response = await fetch(`${API_BASE_URL}/admin/schedules/import-1c`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(testData)
        });

        console.log('üì• Response status:', response.status);
        
        const result = await response.json();
        console.log('üì• Response data:', JSON.stringify(result, null, 2));

        if (result.success) {
            console.log('‚úÖ Import successful!');
            console.log('üìä Statistics:', result.statistics);
            
            // Test getting the imported data
            await testGet();
        } else {
            console.log('‚ùå Import failed:', result.error);
        }

    } catch (error) {
        console.error('‚ùå Test error:', error);
    }
}

async function testGet() {
    try {
        console.log('\nüîç Testing data retrieval...');

        // Test getting all 1C schedules
        const listResponse = await fetch(`${API_BASE_URL}/admin/schedules/1c/list`);
        const schedulesList = await listResponse.json();
        
        console.log('üìã Schedules list:');
        schedulesList.forEach(schedule => {
            console.log(`  - ${schedule.schedule_name} (${schedule.schedule_code}): ${schedule.work_days_count} work days`);
        });

        // Test getting detailed data for first schedule
        if (schedulesList.length > 0) {
            const firstSchedule = schedulesList[0];
            const detailResponse = await fetch(`${API_BASE_URL}/admin/schedules/1c?scheduleCode=${firstSchedule.schedule_code}`);
            const detailData = await detailResponse.json();
            
            console.log(`\nüìÑ Details for "${firstSchedule.schedule_name}":`);
            console.log('üìä Statistics:', detailData.statistics);
            console.log('üóìÔ∏è Work days:', detailData.schedules.length);
        }

    } catch (error) {
        console.error('‚ùå Get test error:', error);
    }
}

async function testValidation() {
    try {
        console.log('\nüõ°Ô∏è Testing validation...');

        // Test with invalid data
        const invalidData = {
            "–î–∞—Ç–∞–í—ã–≥—Ä—É–∑–∫–∏": "2025-06-04T13:05:05",
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ–ì—Ä–∞—Ñ–∏–∫–æ–≤": 1,
            "–ì—Ä–∞—Ñ–∏–∫–∏": [] // Empty array
        };

        const response = await fetch(`${API_BASE_URL}/admin/schedules/import-1c`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(invalidData)
        });

        const result = await response.json();
        
        if (response.status === 400 && !result.success) {
            console.log('‚úÖ Validation working correctly:', result.error);
        } else {
            console.log('‚ùå Validation test failed:', result);
        }

    } catch (error) {
        console.error('‚ùå Validation test error:', error);
    }
}

// Run all tests
async function runAllTests() {
    console.log('üöÄ Starting 1C import API tests...\n');
    
    await testImport();
    await testValidation();
    
    console.log('\n‚úÖ All tests completed!');
}

// Check if this script is being run directly
if (require.main === module) {
    runAllTests().catch(console.error);
}

module.exports = { testImport, testGet, testValidation, runAllTests };