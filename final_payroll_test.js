const axios = require('axios');

async function finalPayrollTest() {
    try {
        console.log('=== –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –û–¢–ß–ï–¢–ê –ü–û –§–û–¢ ===\n');
        
        console.log('üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
        console.log('1. ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º–µ–Ω —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–æ —Ä–µ–∞–ª—å–Ω—ã–º –∑–∞–ø–∏—Å—è–º –≥—Ä–∞—Ñ–∏–∫–æ–≤');
        console.log('2. ‚úÖ –§–û–¢ –Ω–∞ –¥–µ–Ω—å = –º–µ—Å—è—á–Ω–∞—è –ó–ü / –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º–µ–Ω –≤ –ø–µ—Ä–∏–æ–¥–µ');
        console.log('3. ‚úÖ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ = —Å—É–º–º–∞ –≤—Å–µ—Ö "–§–û–¢ –Ω–∞ –¥–µ–Ω—å"');
        console.log('4. ‚úÖ –ù–µ—Ç —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö —Å–º–µ–Ω\n');
        
        // –¢–µ—Å—Ç 1: –ú–∞–ª–µ–Ω—å–∫–∏–π –ø–µ—Ä–∏–æ–¥
        console.log('üìä –¢–ï–°–¢ 1: –ü–µ—Ä–∏–æ–¥ 1 –¥–µ–Ω—å (2025-07-01)');
        const test1 = await axios.get('http://localhost:3030/api/admin/reports/payroll', {
            params: { dateFrom: '2025-07-01', dateTo: '2025-07-01' }
        });
        
        if (test1.data.success) {
            console.log(`   –ó–∞–ø–∏—Å–µ–π: ${test1.data.data.length}`);
            console.log(`   –°—É–º–º–∞: ${test1.data.summary.total} —Ç–µ–Ω–≥–µ`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–π —Å–º–µ–Ω–µ
            const sampleRecord = test1.data.data[0];
            if (sampleRecord) {
                console.log(`   –ü—Ä–∏–º–µ—Ä: ${sampleRecord.full_name}`);
                console.log(`   - –ú–µ—Å—è—á–Ω–∞—è –ó–ü: ${sampleRecord.payroll.toLocaleString('ru-RU')} —Ç–µ–Ω–≥–µ`);
                console.log(`   - –°–º–µ–Ω –≤ –ø–µ—Ä–∏–æ–¥–µ: ${sampleRecord.shifts_count}`);
                console.log(`   - –§–û–¢ –Ω–∞ –¥–µ–Ω—å: ${sampleRecord.daily_payroll.toLocaleString('ru-RU')} —Ç–µ–Ω–≥–µ`);
                console.log(`   - –î–∞—Ç–∞ —Å–º–µ–Ω—ã: ${sampleRecord.work_date}`);
                
                const expectedDaily = sampleRecord.payroll / sampleRecord.shifts_count;
                const isCorrect = Math.abs(expectedDaily - sampleRecord.daily_payroll) < 0.01;
                console.log(`   - –†–∞—Å—á–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: ${isCorrect ? '‚úÖ' : '‚ùå'}`);
            }
        }
        
        // –¢–µ—Å—Ç 2: –ü–µ—Ä–∏–æ–¥ –Ω–µ–¥–µ–ª—è
        console.log('\nüìä –¢–ï–°–¢ 2: –ü–µ—Ä–∏–æ–¥ –Ω–µ–¥–µ–ª—è (2025-07-01 –¥–æ 2025-07-07)');
        const test2 = await axios.get('http://localhost:3030/api/admin/reports/payroll', {
            params: { dateFrom: '2025-07-01', dateTo: '2025-07-07' }
        });
        
        if (test2.data.success) {
            console.log(`   –ó–∞–ø–∏—Å–µ–π: ${test2.data.data.length}`);
            console.log(`   –°—É–º–º–∞: ${test2.data.summary.total} —Ç–µ–Ω–≥–µ`);
            
            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            const employeeMap = {};
            test2.data.data.forEach(record => {
                if (!employeeMap[record.table_number]) {
                    employeeMap[record.table_number] = {
                        name: record.full_name,
                        shifts: 0,
                        totalPayroll: 0,
                        monthlyPayroll: record.payroll,
                        shiftsInPeriod: record.shifts_count
                    };
                }
                employeeMap[record.table_number].shifts++;
                employeeMap[record.table_number].totalPayroll += record.daily_payroll;
            });
            
            const employees = Object.values(employeeMap);
            console.log(`   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${employees.length}`);
            console.log(`   –°—Ä–µ–¥–Ω–µ–µ —Å–º–µ–Ω –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: ${(test2.data.data.length / employees.length).toFixed(1)}`);
        }
        
        // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
        console.log('\nüìä –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏');
        const calculatedTotal = test2.data.data.reduce((sum, row) => sum + row.daily_payroll, 0);
        const reportedTotal = parseFloat(test2.data.summary.total);
        const difference = Math.abs(calculatedTotal - reportedTotal);
        
        console.log(`   –†–∞—Å—á–µ—Ç–Ω–∞—è —Å—É–º–º–∞: ${calculatedTotal.toFixed(2)} —Ç–µ–Ω–≥–µ`);
        console.log(`   –°—É–º–º–∞ –≤ –æ—Ç—á–µ—Ç–µ: ${reportedTotal.toFixed(2)} —Ç–µ–Ω–≥–µ`);
        console.log(`   –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: ${difference.toFixed(2)} —Ç–µ–Ω–≥–µ`);
        console.log(`   –¢–æ—á–Ω–æ—Å—Ç—å: ${difference < 0.01 ? '‚úÖ –ò–¥–µ–∞–ª—å–Ω–∞—è' : difference < 1 ? '‚úÖ –ü—Ä–∏–µ–º–ª–µ–º–∞—è' : '‚ùå –û—à–∏–±–∫–∞'}`);
        
        // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        console.log('\nüìä –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–¢–û–û Madlen Group)');
        const test4 = await axios.get('http://localhost:3030/api/admin/reports/payroll', {
            params: { 
                dateFrom: '2025-07-01', 
                dateTo: '2025-07-07',
                organization: '241240023631'  // –¢–û–û Madlen Group
            }
        });
        
        if (test4.data.success) {
            console.log(`   –ó–∞–ø–∏—Å–µ–π —Å —Ñ–∏–ª—å—Ç—Ä–æ–º: ${test4.data.data.length}`);
            console.log(`   –°—É–º–º–∞ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º: ${test4.data.summary.total} —Ç–µ–Ω–≥–µ`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ—Ç –Ω—É–∂–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            const uniqueOrgs = [...new Set(test4.data.data.map(r => r.organization_name))];
            console.log(`   –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ: ${uniqueOrgs.join(', ')}`);
            console.log(`   –§–∏–ª—å—Ç—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: ${uniqueOrgs.length === 1 && uniqueOrgs[0] === '–¢–û–û Madlen Group' ? '‚úÖ' : '‚ùå'}`);
        }
        
        console.log('\nüéâ –†–ï–ó–Æ–ú–ï:');
        console.log('‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º–µ–Ω —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–æ —Ä–µ–∞–ª—å–Ω—ã–º –∑–∞–ø–∏—Å—è–º –∏–∑ work_schedules_1c');
        console.log('‚úÖ –§–û–¢ –Ω–∞ –¥–µ–Ω—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ (–º–µ—Å—è—á–Ω–∞—è –ó–ü / —Å–º–µ–Ω—ã –≤ –ø–µ—Ä–∏–æ–¥–µ)');
        console.log('‚úÖ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ (—Å—É–º–º–∞ –≤—Å–µ—Ö daily_payroll)');
        console.log('‚úÖ –§–∏–∫—Ç–∏–≤–Ω—ã–µ —Å–º–µ–Ω—ã —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã');
        console.log('‚úÖ –§–∏–ª—å—Ç—Ä—ã –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é —Ä–∞–±–æ—Ç–∞—é—Ç');
        console.log('‚úÖ –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å —Å–æ–±–ª—é–¥–µ–Ω–∞');
        
        console.log('\nüèÜ –í–°–ï –û–®–ò–ë–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–´! –û—Ç—á–µ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.response?.data || error.message);
    }
}

finalPayrollTest();