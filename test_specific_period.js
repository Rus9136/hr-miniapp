const axios = require('axios');

async function testSpecificPeriod() {
    try {
        console.log('=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ (–ø–µ—Ä–≤–∞—è –Ω–µ–¥–µ–ª—è –∏—é–ª—è) ===\n');
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞ –ø–µ—Ä–≤—É—é –Ω–µ–¥–µ–ª—é –∏—é–ª—è 2025
        const params = {
            dateFrom: '2025-07-01',
            dateTo: '2025-07-07'
        };
        
        console.log(`–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥: ${params.dateFrom} - ${params.dateTo}`);
        
        const response = await axios.get('http://localhost:3030/api/admin/reports/payroll', { params });
        
        if (response.data.success) {
            console.log(`\n‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!`);
            console.log(`–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${response.data.data.length}`);
            console.log(`–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: ${response.data.summary.total} —Ç–µ–Ω–≥–µ`);
            
            if (response.data.data.length > 0) {
                // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
                const employeeStats = {};
                
                response.data.data.forEach(record => {
                    const key = record.table_number;
                    if (!employeeStats[key]) {
                        employeeStats[key] = {
                            name: record.full_name,
                            department: record.department_name,
                            shifts_in_week: 0,
                            monthly_payroll: record.payroll,
                            total_shifts_in_period: record.shifts_count,
                            weekly_payroll_total: 0,
                            shifts: []
                        };
                    }
                    employeeStats[key].shifts_in_week++;
                    employeeStats[key].weekly_payroll_total += record.daily_payroll;
                    employeeStats[key].shifts.push({
                        date: record.work_date,
                        daily_payroll: record.daily_payroll,
                        work_hours: record.work_hours
                    });
                });
                
                console.log('\nüìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:');
                
                Object.values(employeeStats).slice(0, 3).forEach((emp, index) => {
                    console.log(`\n${index + 1}. ${emp.name} (${emp.department})`);
                    console.log(`   –ú–µ—Å—è—á–Ω–∞—è –ó–ü: ${emp.monthly_payroll.toLocaleString('ru-RU')} —Ç–µ–Ω–≥–µ`);
                    console.log(`   –í—Å–µ–≥–æ —Å–º–µ–Ω –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ: ${emp.total_shifts_in_period}`);
                    console.log(`   –§–û–¢ –Ω–∞ —Å–º–µ–Ω—É: ${(emp.monthly_payroll / emp.total_shifts_in_period).toFixed(2)} —Ç–µ–Ω–≥–µ`);
                    console.log(`   –°–º–µ–Ω –∑–∞ –Ω–µ–¥–µ–ª—é: ${emp.shifts_in_week}`);
                    console.log(`   –§–û–¢ –∑–∞ –Ω–µ–¥–µ–ª—é: ${emp.weekly_payroll_total.toFixed(2)} —Ç–µ–Ω–≥–µ`);
                    console.log(`   –°–º–µ–Ω—ã –ø–æ –¥–Ω—è–º:`);
                    emp.shifts.forEach(shift => {
                        console.log(`     ${shift.date}: ${shift.daily_payroll} —Ç–µ–Ω–≥–µ (${shift.work_hours}—á)`);
                    });
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                    const expectedDaily = emp.monthly_payroll / emp.total_shifts_in_period;
                    const actualDaily = emp.shifts[0].daily_payroll;
                    const expectedWeekly = expectedDaily * emp.shifts_in_week;
                    
                    console.log(`   –ü—Ä–æ–≤–µ—Ä–∫–∞: –æ–∂–∏–¥–∞–µ–º–∞—è –Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ = ${expectedWeekly.toFixed(2)} —Ç–µ–Ω–≥–µ`);
                    console.log(`   –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ = ${emp.weekly_payroll_total.toFixed(2)} —Ç–µ–Ω–≥–µ`);
                    console.log(`   –†–∞—Å—á–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: ${Math.abs(expectedWeekly - emp.weekly_payroll_total) < 0.01 ? '‚úÖ' : '‚ùå'}`);
                });
                
                // –û–±—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                const totalEmployees = Object.keys(employeeStats).length;
                const totalShifts = response.data.data.length;
                const avgShiftsPerEmployee = totalShifts / totalEmployees;
                
                console.log(`\nüìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
                console.log(`–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${totalEmployees}`);
                console.log(`–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º–µ–Ω: ${totalShifts}`);
                console.log(`–°—Ä–µ–¥–Ω–µ–µ —Å–º–µ–Ω –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é: ${avgShiftsPerEmployee.toFixed(1)}`);
                
            } else {
                console.log('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
            }
            
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç—á–µ—Ç–µ:', response.data.error);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.response?.data || error.message);
    }
}

testSpecificPeriod();